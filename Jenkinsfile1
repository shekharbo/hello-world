pipeline {
    agent {
      label 'ec2'
        }

    environment {
        DOCKER_REGISTRY = "584294315145.dkr.ecr.us-east-1.amazonaws.com"
        SONARQUBE_SERVER = "http://54.144.52.38:9000"
        AWS_REGION = "us-east-1"
        AWS_ECR_REPO = "github-poc"
    }
    stages {
        stage('Checkout') {
            steps {
                retry(3) {
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/shekharbo/hello-world.git']]])
                }
            }
        }
        
        stage('Unit Test') {
            steps {
                sh 'docker --version'
                sh 'docker pull python:3.9'
                sh 'pip install -r requirements.txt'
                sh 'python3 -m venv ~/myenv'
                sh 'source ~/myenv/bin/activate'
                sh 'pytest /home/ubuntu/workspace/hello_world_demo/tests/'
            }
        }
        
        stage('Code Coverage') {
            steps {
                sh 'coverage run -m pytest'
                sh 'coverage report'
                sh 'coverage xml -o coverage.xml'
                publishCoverage adapters: [cobertura('coverage.xml')]
            }
        }
        
        stage('SCA and SonarQube') {
            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    sh "sonar-scanner -Dsonar.projectKey=hello-world -Dsonar.sources=src -Dsonar.host.url=${SONARQUBE_SERVER} -Dsonar.login=squ_fbfc3d6e4838528f0ebc3bb4633196570f56aee3"
                }
            }
        }
        
        stage('Build') {
            steps {
                sh 'python setup.py sdist'
            }
        }
        
        stage('AWS Login') {
            steps {
                withAWS(credentials: 'aws-credentials-id', region: AWS_REGION) {
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}"
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                script {
                    dockerImage = docker.build("${DOCKER_REGISTRY}/${AWS_ECR_REPO}:${env.BUILD_ID}")
                }
            }
        }
        
        stage('Docker Scan') {
            steps {
                sh "docker scan ${AWS_ECR_REPO}"
            }
        }
        
        stage('Docker Tag and Push') {
            steps {
                script {
                    dockerImage.push()
                }
            }
        }
        
        stage('Pull ECR Image') {
            steps {
                sh "docker pull ${DOCKER_REGISTRY}/${AWS_ECR_REPO}:${env.BUILD_ID}"
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                sshagent(['ec2-ssh-credentials']) {
                    sh "ssh -o StrictHostKeyChecking=no ec2-user@<ec2-instance-ip> docker run -d -p 80:80 ${DOCKER_REGISTRY}/${AWS_ECR_REPO}:${env.BUILD_ID}"
                }
            }
        }
    }
}
